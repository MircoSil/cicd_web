name: CI/CD

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          COMMIT_TAG=${{ github.sha }}
          docker build -t $REGISTRY/${{ env.IMAGE_NAME }}:$COMMIT_TAG -t $REGISTRY/${{ env.IMAGE_NAME }}:latest .
          docker push $REGISTRY/${{ env.IMAGE_NAME }}:$COMMIT_TAG
          docker push $REGISTRY/${{ env.IMAGE_NAME }}:latest
          echo "IMAGE_TAG=$COMMIT_TAG" >> $GITHUB_ENV

  deploy_staging:
    needs: build_push
    runs-on: self-hosted
    environment: staging
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show workspace + verify script
        shell: pwsh
        run: |
          Write-Host "Workspace: $env:GITHUB_WORKSPACE"
          Get-ChildItem -Recurse -ErrorAction SilentlyContinue $env:GITHUB_WORKSPACE | Select-Object -First 200 FullName
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\deploy\update.ps1")) {
            Write-Error "deploy\update.ps1 nicht gefunden! Ist die Datei im Repo auf dem Branch vorhanden?"
          }

      - name: Docker login (GHCR)
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Update container (staging)
        shell: pwsh
        run: |
          & "$env:GITHUB_WORKSPACE\deploy\update.ps1" -ImageTag "latest" -Repo "ghcr.io/${{ github.repository }}" -Name "my-webapp-staging"

  deploy_prod:
    needs: build_push
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Verify script
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:GITHUB_WORKSPACE\deploy\update.ps1")) {
            Write-Error "deploy\update.ps1 nicht gefunden!"
          }

      - name: Docker login (GHCR)
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

      - name: Update container (prod)
        shell: pwsh
        run: |
          $tag="${{ github.sha }}"
          & "$env:GITHUB_WORKSPACE\deploy\update.ps1" -ImageTag $tag -Repo "ghcr.io/${{ github.repository }}" -Name "my-webapp"


